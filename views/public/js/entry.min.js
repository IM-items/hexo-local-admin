/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!***************************!*\
  !*** ./views/js/entry.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	const AJAX_TIMEOUT = 1000;
	
	// 事件委托
	$.fn.multiOn = function (obj) {
	    for (var eName in obj)
	        if (obj.hasOwnProperty(eName))
	            for (var selector in obj[eName])
	                if (obj[eName].hasOwnProperty(selector))
	                    $(this).on(eName, selector, obj[eName][selector]);
	};
	
	var $listNav = $('#list-nav'),
	    $listNavLi = $listNav.children('li');
	
	$listNavLi.click(function () {
	    $listNavLi.removeClass('active');
	    $(this).addClass('active');
	    $listNav.attr('data-select', $(this).attr('data-index'));
	});
	
	$('.f-item').click(function () {
	    var $this = $(this),
	        type = $this.attr('data-type'),
	        index = $this.attr('data-index');
	
	    $.ajax({
	        url: '/get-markdown-file',
	        method: 'get',
	        timeout: AJAX_TIMEOUT,
	        data: {
	            type: type,
	            index: index
	        },
	        dataType: 'json',
	        cache: false,
	        success: function (data) {
	            showContentDetail($.extend(data, {type: type, index: index}))
	        },
	        error: function (err) {
	            console.log('error, err=%O', err.responseJSON.msg);
	        }
	    });
	});
	
	$('.view-config').click(function () {
	    var type = $(this).attr('data-type');
	
	    if (type.search(/site|theme/) === -1) {
	        console.warn('no such config type:' + type);
	        return;
	    }
	
	    $('#content-detail-head').html('<h3>' + type.toUpperCase() + ' CONFIG</h3><hr>');
	
	    $.ajax({
	        url: '/get-config',
	        method: 'get',
	        timeout: AJAX_TIMEOUT,
	        data: {type: type},
	        dataType: 'json',
	        cache: false,
	        success: showContentDetail,
	        error: function (err) {
	            console.log('error, err=%O', err.responseJSON);
	        }
	    });
	});
	
	$('#close-detail').click(function () {
	    $('#content-detail-inner').removeAttr('data-type class');
	    $('#content-detail-wrap').removeClass('show');
	    $('html, body').removeClass('no-scroll');
	    setTimeout(function () {
	        $('#content-detail-inner').children('div').empty();
	    }, 400);
	});
	
	$('body').mousedown(function (e) {
	    var $target = $('#content-detail-inner');
	    if ($('#content-detail-wrap').hasClass('show') && !$target.is(e.target) && $target.has(e.target).length === 0) {
	        $('#close-detail').trigger('click');
	    }
	});
	
	$('#alert').click(function () {
	    $(this).removeClass('show');
	});
	
	// ------- detail actions ---------
	$('#content-detail-body').multiOn({
	    click: {
	        // 编辑、取消、保存
	        '#t-edit': function () {
	            var $this = $(this),
	                $tools = $this.parent().children('li');
	
	            // 操作按钮
	            $tools.addClass('collapse');
	            setTimeout(function () {
	                $this.attr('id', 't-save').text('保存');
	                $('<li id="t-cancel" class="collapse">取消</li>').insertAfter($this);
	
	                $this.removeClass('collapse');
	                setTimeout(function () {
	                    $('#t-cancel').removeClass('collapse');
	                }, 100);
	            }, 400);
	
	            // 缓存文章内容
	            var $content = $('#content-detail'),
	                content = $content.text();
	
	            sessionStorage.setItem('content-cache', content);
	            $content.empty().html('<textarea id="content-editor">' + content + '</textarea>');
	        },
	        '#t-cancel': function () {
	            var $content = $('#content-detail'),
	                $this = $(this),
	                $tools = $this.parent().children('li'),
	                prevContent = sessionStorage.getItem('content-cache');
	
	            $content.html(prevContent);
	
	            $tools.addClass('collapse');
	
	            setTimeout(function () {
	                $('#t-save').attr('id', 't-edit').text('编辑');
	                $this.remove();
	                $tools.removeAttr('class');
	            }, 400);
	        },
	        '#t-save': function () {
	            var $this = $(this),
	                $editor = $('#content-editor'),
	                $tools = $('#content-tool'),
	                $content_detail = $('#content-detail'),
	                type = $tools.attr('data-type'),
	                index = $tools.attr('data-index');
	
	            if ($this.hasClass('processing')) return;
	
	            $this.addClass('processing');
	            $.ajax({
	                url: '/write-markdown-file',
	                method: 'post',
	                timeout: AJAX_TIMEOUT,
	                data: {
	                    'type': type,
	                    'index': index,
	                    'content': $editor.val()
	                },
	                dataType: 'json',
	                cache: false,
	                success: function (data) {
	                    if (data.status && data.status == 'success') {
	                        $tools.children('li').addClass('collapse');
	                        $content_detail.html($editor.val().trim());
	
	                        setTimeout(function () {
	                            $this.attr('id', 't-edit').text('编辑');
	                            $('#t-cancel').remove();
	                            $tools.children('li').removeAttr('class');
	                            bsAlert('success', '保存成功！');
	                        }, 400);
	                    }
	                    else {
	                        $this.removeClass('processing');
	                        bsAlert('warning', '发现未知问题！');
	                    }
	                },
	                error: function (err) {
	                    $this.removeClass('processing');
	                    bsAlert('danger', '错误：' + err.responseJSON);
	                }
	            });
	        },
	
	        // 发布新文章/页面
	        '#t-publish-new': function () {
	            var $content_inner = $('#content-detail-inner'),
	                $publishBtn = $('#t-publish-new'),
	                file_name = $('#new-filename').val().trim(),
	                type = $('[name="new-type"]:checked').val().trim(),
	                content = $('#content-editor').val();
	
	            $content_inner.addClass('processing');
	            $publishBtn.attr('disabled', 'disabled');
	
	            if (!file_name || !isFilePathNameValid(file_name)) {
	                bsAlert('danger', '文件名/页面路径输入不正确');
	                $publishBtn.removeAttr('disabled');
	                $content_inner.removeClass('processing');
	                return false;
	            }
	
	            $.ajax({
	                url: '/write-markdown-file',
	                method: 'post',
	                timeout: AJAX_TIMEOUT,
	                data: {
	                    'type': type,
	                    'file_name': file_name,
	                    'content': content
	                },
	                dataType: 'json',
	                cache: false,
	                success: function (data) {
	                    if (data.status && data.status == 'success') {
	                        $('#close-detail').trigger('click');
	                        bsAlert('success', '发布成功！');
	                    }
	                    else {
	                        bsAlert('warning', '发现未知问题！');
	                    }
	                },
	                error: function (err) {
	                    bsAlert('danger', '错误：' + err.responseJSON.msg);
	                    $content_inner.removeClass('processing');
	                    $publishBtn.removeAttr('disabled');
	                }
	            });
	        },
	
	        // ---- 文件移动相关 ----
	        // 移到草稿
	        '#t-unpublish': function () {
	            moveFileTo('drafts');
	        },
	        '#t-delete': function () {
	            moveFileTo('trash');
	        },
	        '#t-publish-post': function () {
	            moveFileTo('posts');
	        },
	        '#t-publish-page': function () {
	            moveFileTo('pages');
	        }
	    }
	});
	
	$('#add-new').click(function () {
	    showContentDetail({type: "new", tpl: __webpack_require__(/*! ../ejs/tpl/new-post.ejs */ 1)});
	});
	
	function showContentDetail(data) {
	    var tpl = data.tpl || __webpack_require__(/*! ../ejs/tpl/file-content.ejs */ 2);
	    $('#content-detail-inner').attr('data-type', data.type);
	    $('#content-detail-body').empty().html(tpl({data: data}));
	    $('#content-detail-wrap').addClass('show');
	    $('html, body').addClass('no-scroll');
	}
	
	function moveFileTo(target_type) {
	    var $tool_wrap = $('#content-tool'),
	        type = $tool_wrap.attr('data-type'),
	        index = $tool_wrap.attr('data-index');
	
	    if (!type || !index) {
	        console.error('type or index error');
	        return;
	    }
	
	    $.ajax({
	        url: '/move-markdown-file',
	        method: 'post',
	        timeout: AJAX_TIMEOUT,
	        data: {
	            'type': type,
	            'index': index,
	            'target_type': target_type
	        },
	        dataType: 'json',
	        cache: false,
	        success: function (data) {
	            if (data.status && data.status == 'success') {
	                $('#close-detail').trigger('click');
	                bsAlert('success', '移动成功！');
	            }
	            // else {
	            //     bsAlert('warning', '发现未知问题！');
	            // }
	            console.log('success:%O', data);
	        },
	        error: function (err) {
	            bsAlert('danger', '错误：' + err.responseJSON.msg);
	        }
	    });
	}
	
	var alertTime;
	//default types: ['success', 'info', 'warning', 'danger']
	/**
	 * @param {string} type
	 * @param {string} html
	 * */
	function bsAlert(type, html) {
	    var $alert = $('#alert');
	
	    if ($alert.hasClass('show')) {
	        $alert.removeClass('show');
	        setTimeout(action, 400);
	    }
	    else {
	        action();
	    }
	
	    function action() {
	        $alert.removeClass('alert-success alert-info alert-danger alert-warning');
	        $alert.addClass('alert-' + type + ' show').html(html);
	    }
	
	    if (alertTime) clearTimeout(alertTime);
	    alertTime = setTimeout(function () {
	        $alert.removeClass('show');
	    }, 3000);
	}
	
	function isFilePathNameValid(str) {
	    return str.replace(/[a-zA-Z0-9]|_|-/g, '').length === 0;
	}

/***/ },
/* 1 */
/*!************************************!*\
  !*** ./views/ejs/tpl/new-post.ejs ***!
  \************************************/
/***/ function(module, exports) {

	module.exports = function anonymous(locals, escape, include, rethrow) {
	    rethrow = rethrow || function rethrow(err, str, filename, lineno) {
	        var lines = str.split("\n"), start = Math.max(lineno - 3, 0), end = Math.min(lines.length, lineno + 3);
	        var context = lines.slice(start, end).map(function(line, i) {
	            var curr = i + start + 1;
	            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
	        }).join("\n");
	        err.path = filename;
	        err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
	        throw err;
	    };
	    escape = escape || function(markup) {
	        return markup == undefined ? "" : String(markup).replace(_MATCH_HTML, encode_char);
	    };
	    var _ENCODE_HTML_RULES = {
	        "&": "&amp;",
	        "<": "&lt;",
	        ">": "&gt;",
	        '"': "&#34;",
	        "'": "&#39;"
	    }, _MATCH_HTML = /[&<>'"]/g;
	    function encode_char(c) {
	        return _ENCODE_HTML_RULES[c] || c;
	    }
	    var __line = 1, __lines = '<label for="new-filename">文件名/页面路径</label>\n<input type="text" name="filename" id="new-filename" class="form-control" placeholder="只允许字母、数字和英文符号：下划线(_)、连字符(-)">\n<br>\n\n<label>类型</label>\n<br>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-posts" value="posts" checked>\n    文章\n</label>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-pages" value="pages">\n    页面\n</label>\n\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-drafts" value="drafts">\n    草稿\n</label>\n<br><br>\n\n\n<%\nvar time = new Date();\ntime = time.getFullYear() + \'-\' + (time.getMonth() + 1) + \'-\' + time.getDate() + \' \' + time.getHours() + \':\' + time.getMinutes() + \':\' + time.getSeconds();\n%>\n\n<label for="content-editor">内容</label>\n<textarea name="content" id="content-editor">title: new post\ndate: <%= time %>\n---\nnew content here</textarea>\n<br>\n\n<div id="new-publish-buttons" class="text-center">\n    <button id="t-publish-new" class="btn btn-default">发布</button>\n</div>\n', __filename = "views/ejs/tpl/new-post.ejs";
	    try {
	        var __output = [], __append = __output.push.bind(__output);
	        with (locals || {}) {
	            __lines = '<label for="new-filename">文件名/页面路径</label>\n<input type="text" name="filename" id="new-filename" class="form-control" placeholder="只允许字母、数字和英文符号：下划线(_)、连字符(-)">\n<br>\n\n<label>类型</label>\n<br>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-posts" value="posts" checked>\n    文章\n</label>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-pages" value="pages">\n    页面\n</label>\n\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-drafts" value="drafts">\n    草稿\n</label>\n<br><br>\n\n\n<%\nvar time = new Date();\ntime = time.getFullYear() + \'-\' + (time.getMonth() + 1) + \'-\' + time.getDate() + \' \' + time.getHours() + \':\' + time.getMinutes() + \':\' + time.getSeconds();\n%>\n\n<label for="content-editor">内容</label>\n<textarea name="content" id="content-editor">title: new post\ndate: <%= time %>\n---\nnew content here</textarea>\n<br>\n\n<div id="new-publish-buttons" class="text-center">\n    <button id="t-publish-new" class="btn btn-default">发布</button>\n</div>\n';
	            __filename = "views/ejs/tpl/new-post.ejs";
	            __append('<label for="new-filename">文件名/页面路径</label>\n<input type="text" name="filename" id="new-filename" class="form-control" placeholder="只允许字母、数字和英文符号：下划线(_)、连字符(-)">\n<br>\n\n<label>类型</label>\n<br>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-posts" value="posts" checked>\n    文章\n</label>\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-pages" value="pages">\n    页面\n</label>\n\n<label class="radio-inline">\n    <input type="radio" name="new-type" id="new-type-drafts" value="drafts">\n    草稿\n</label>\n<br><br>\n\n\n');
	            __line = 23;
	            var time = new Date();
	            time = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate() + " " + time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds();
	            __line = 26;
	            __append('\n\n<label for="content-editor">内容</label>\n<textarea name="content" id="content-editor">title: new post\ndate: ');
	            __line = 30;
	            __append(escape(time));
	            __append('\n---\nnew content here</textarea>\n<br>\n\n<div id="new-publish-buttons" class="text-center">\n    <button id="t-publish-new" class="btn btn-default">发布</button>\n</div>\n');
	            __line = 38;
	        }
	        return __output.join("");
	    } catch (e) {
	        rethrow(e, __lines, __filename, __line);
	    }
	}

/***/ },
/* 2 */
/*!****************************************!*\
  !*** ./views/ejs/tpl/file-content.ejs ***!
  \****************************************/
/***/ function(module, exports) {

	module.exports = function anonymous(locals, escape, include, rethrow) {
	    rethrow = rethrow || function rethrow(err, str, filename, lineno) {
	        var lines = str.split("\n"), start = Math.max(lineno - 3, 0), end = Math.min(lines.length, lineno + 3);
	        var context = lines.slice(start, end).map(function(line, i) {
	            var curr = i + start + 1;
	            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
	        }).join("\n");
	        err.path = filename;
	        err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
	        throw err;
	    };
	    escape = escape || function(markup) {
	        return markup == undefined ? "" : String(markup).replace(_MATCH_HTML, encode_char);
	    };
	    var _ENCODE_HTML_RULES = {
	        "&": "&amp;",
	        "<": "&lt;",
	        ">": "&gt;",
	        '"': "&#34;",
	        "'": "&#39;"
	    }, _MATCH_HTML = /[&<>'"]/g;
	    function encode_char(c) {
	        return _ENCODE_HTML_RULES[c] || c;
	    }
	    var __line = 1, __lines = '<% if (data.type) { %>\n<ul id="content-tool" class="list-action list-unstyled"\n    data-type="<%= data.type %>" data-index="<%= data.index %>">\n    <li id="t-edit">编辑</li>\n\n    <% if (data.type == \'posts\' || data.type == \'pages\'){ %>\n    <li id="t-unpublish">移到草稿</li>\n    <% } else if (data.type == \'drafts\') { %>\n    <li id="t-publish-post">发布到文章</li>\n    <li id="t-publish-page">发布到页面</li>\n    <% } else if (data.type == \'trash\') { %>\n    <li id="t-publish-post">还原到文章</li>\n    <li id="t-publish-page">还原到页面</li>\n    <li id="t-unpublish">还原到草稿</li>\n    <% } %>\n\n    <% if (data.type === \'trash\') { %>\n    <li id="t-delete">删除</li>\n    <% }else { %>\n    <li id="t-delete">移到回收站</li>\n    <% } %>\n</ul>\n<% } %>\n<%\nvar data_content = \'no content\';\nif (data.raw_content) {\n    data_content = data.raw_content.trim();\n} else if (typeof data == \'string\') {\n    data_content = data.trim()\n}\n%>\n<% if (data.page_url) { %>\n<h3>/<%= data.page_url %></h3>\n<hr>\n<% } else if (data.file_name) { %>\n<!-- todo 允许修改文件名? -->\n<!-- todo 增加文件的完整路径？方便定位文件具体位置 -->\n<h3><%= data.file_name %></h3>\n<hr>\n<% } %>\n\n<div id="content-detail"><%= data_content %></div>', __filename = "views/ejs/tpl/file-content.ejs";
	    try {
	        var __output = [], __append = __output.push.bind(__output);
	        with (locals || {}) {
	            __lines = '<% if (data.type) { %>\n<ul id="content-tool" class="list-action list-unstyled"\n    data-type="<%= data.type %>" data-index="<%= data.index %>">\n    <li id="t-edit">编辑</li>\n\n    <% if (data.type == \'posts\' || data.type == \'pages\'){ %>\n    <li id="t-unpublish">移到草稿</li>\n    <% } else if (data.type == \'drafts\') { %>\n    <li id="t-publish-post">发布到文章</li>\n    <li id="t-publish-page">发布到页面</li>\n    <% } else if (data.type == \'trash\') { %>\n    <li id="t-publish-post">还原到文章</li>\n    <li id="t-publish-page">还原到页面</li>\n    <li id="t-unpublish">还原到草稿</li>\n    <% } %>\n\n    <% if (data.type === \'trash\') { %>\n    <li id="t-delete">删除</li>\n    <% }else { %>\n    <li id="t-delete">移到回收站</li>\n    <% } %>\n</ul>\n<% } %>\n<%\nvar data_content = \'no content\';\nif (data.raw_content) {\n    data_content = data.raw_content.trim();\n} else if (typeof data == \'string\') {\n    data_content = data.trim()\n}\n%>\n<% if (data.page_url) { %>\n<h3>/<%= data.page_url %></h3>\n<hr>\n<% } else if (data.file_name) { %>\n<!-- todo 允许修改文件名? -->\n<!-- todo 增加文件的完整路径？方便定位文件具体位置 -->\n<h3><%= data.file_name %></h3>\n<hr>\n<% } %>\n\n<div id="content-detail"><%= data_content %></div>';
	            __filename = "views/ejs/tpl/file-content.ejs";
	            if (data.type) {
	                __append('\n<ul id="content-tool" class="list-action list-unstyled"\n    data-type="');
	                __line = 3;
	                __append(escape(data.type));
	                __append('" data-index="');
	                __append(escape(data.index));
	                __append('">\n    <li id="t-edit">编辑</li>\n\n    ');
	                __line = 6;
	                if (data.type == "posts" || data.type == "pages") {
	                    __append('\n    <li id="t-unpublish">移到草稿</li>\n    ');
	                    __line = 8;
	                } else if (data.type == "drafts") {
	                    __append('\n    <li id="t-publish-post">发布到文章</li>\n    <li id="t-publish-page">发布到页面</li>\n    ');
	                    __line = 11;
	                } else if (data.type == "trash") {
	                    __append('\n    <li id="t-publish-post">还原到文章</li>\n    <li id="t-publish-page">还原到页面</li>\n    <li id="t-unpublish">还原到草稿</li>\n    ');
	                    __line = 15;
	                }
	                __append("\n\n    ");
	                __line = 17;
	                if (data.type === "trash") {
	                    __append('\n    <li id="t-delete">删除</li>\n    ');
	                    __line = 19;
	                } else {
	                    __append('\n    <li id="t-delete">移到回收站</li>\n    ');
	                    __line = 21;
	                }
	                __append("\n</ul>\n");
	                __line = 23;
	            }
	            __append("\n");
	            __line = 24;
	            var data_content = "no content";
	            if (data.raw_content) {
	                data_content = data.raw_content.trim();
	            } else if (typeof data == "string") {
	                data_content = data.trim();
	            }
	            __line = 31;
	            __append("\n");
	            __line = 32;
	            if (data.page_url) {
	                __append("\n<h3>/");
	                __line = 33;
	                __append(escape(data.page_url));
	                __append("</h3>\n<hr>\n");
	                __line = 35;
	            } else if (data.file_name) {
	                __append("\n<!-- todo 允许修改文件名? -->\n<!-- todo 增加文件的完整路径？方便定位文件具体位置 -->\n<h3>");
	                __line = 38;
	                __append(escape(data.file_name));
	                __append("</h3>\n<hr>\n");
	                __line = 40;
	            }
	            __append('\n\n<div id="content-detail">');
	            __line = 42;
	            __append(escape(data_content));
	            __append("</div>");
	        }
	        return __output.join("");
	    } catch (e) {
	        rethrow(e, __lines, __filename, __line);
	    }
	}

/***/ }
/******/ ]);
//# sourceMappingURL=entry.min.js.map